#!/usr/bin/env bash
#
# Copyright Bart Trojanowski <bart@jukie.net>
#
# git-wip is a script that will manage Work In Progress (or WIP) branches.
# WIP branches are mostly throw away but identify points of development
# between commits.  The intent is to tie this script into your editor so
# that each time you save your file, the git-wip script captures that
# state in git.  git-wip also helps you return back to a previous state of
# development.
#
# See also http://github.com/bartman/git-wip
#
# The code is licensed as GPL v2 or, at your option, any later version.
# Please see http://www.gnu.org/licenses/gpl-2.0.txt
#

function main()
{
	init

	if test $# -eq 0
	then
		dbg "no arguments"

		do_save "WIP"
		exit $?
	fi

	dbg "args: $@"

	case "$1" in
		save)
			WIP_COMMAND=$1
			shift
			if [ -n "$1" ] && [[ "$1" != -* ]]
			then
				WIP_MESSAGE="$1"
				shift
			fi
			;;
		info|log|delete|push)
			WIP_COMMAND=$1
			shift
			;;
		help)
			do_help 0
			;;
		--*)
			;;
		*)
			[ -f "$1" ] || die "Unknown command '$1'."
			;;
	esac

	case $WIP_COMMAND in
		save)
			do_save "$WIP_MESSAGE" "$@"
			;;
		info)
			do_info "$@"
			;;
		log)
			do_log "$@"
			;;
		delete)
			do_delete "$@"
			;;
		push)
			do_push "" "$@"
			;;
		*)
			usage
			exit 1
			;;
	esac
}

function init()
{
	NOT_EMACS_MAGIT_WIP=
	GIT_COMMAND="git"
	USAGE='[ info | save <message> [ --editor | --untracked | --no-gpg-sign | --push no_of_commits ] | log [ --pretty ] | delete ] [ [--] <file>... ]'
	LONG_USAGE="Manage Work In Progress branches

Commands:
        $GIT_COMMAND wip                   - create a new WIP commit
        $GIT_COMMAND wip save <message>    - create a new WIP commit with custom message
        $GIT_COMMAND wip info [<branch>]   - brief WIP info
        $GIT_COMMAND wip log [<branch>]    - show changes on the WIP branch
        $GIT_COMMAND wip delete [<branch>] - delete a WIP branch
        $GIT_COMMAND wip push [<branch>]   - push a WIP branch

Options for save:
        -e --editor               - be less verbose, assume called from an editor
        -u --untracked            - capture also untracked files
        -i --ignored              - capture also ignored files
        --no-gpg-sign             - do not sign commit; that is, countermand
                                    'commit.gpgSign = true'
        -p --push no_of_commits   - also push if no_of_commits exceeds

Options for log:
        -P --pretty               - show a pretty graph
	      -r --reflog               - show changes in reflog
	      -s --stat                 - show diffstat
"

	SUBDIRECTORY_OK=Yes
	OPTIONS_SPEC=

	. "$($GIT_COMMAND --exec-path)/git-sh-setup"

	require_work_tree

	if [ "$NOT_EMACS_MAGIT_WIP" ]
	then
		WIP_INDEX_TMP=".git-wip.$$"
		trap 'rm -f "$GIT_DIR/$WIP_INDEX_TMP-*"' 0
		# else
		# trap 'rm -rf "$GIT_DIR/refs/wip/index/"' 0
	fi

	if [ "$NOT_EMACS_MAGIT_WIP" ]
	then
		WIP_PREFIX=refs/wip/
	else
		WIP_PREFIX=refs/wip/wtree/
	fi

	WIP_COMMAND=
	WIP_MESSAGE=WIP
	EDITOR_MODE=false
}


function dbg()
{
	if test -n "$WIP_DEBUG"
	then
		printf '# %s\n' "$*"
	fi
}

# some errors are not worth reporting in --editor mode
function report_soft_error()
{
	$EDITOR_MODE && exit 0
	die "$@"
}

function cleanup()
{
	rm -f "$TMP-*"
}

function get_index_file()
{
	local work_branch=$(get_work_branch)
	local WIP_INDEX
	if [ "$NOT_EMACS_MAGIT_WIP" ]
	then
		WIP_INDEX="$GIT_DIR/$WIP_INDEX_TMP-INDEX-${work_branch}"
	else
		WIP_INDEX="$GIT_DIR/refs/wip/index/${work_branch}"
	fi
	echo $WIP_INDEX
}

function get_work_branch()
{
	ref=$($GIT_COMMAND symbolic-ref -q HEAD) \
	|| report_soft_error "git-wip requires a branch"

	if [ "$NOT_EMACS_MAGIT_WIP" ]
	then
		branch=${ref#refs/heads/}
	else
		branch=${ref}
	fi
	if [ "$NOT_EMACS_MAGIT_WIP" -a $branch = $ref ]
	then
		die "git-wip requires a local branch"
	fi

	echo $branch
}

function get_wip_branch()
{
	return 0
}

function check_files()
{
	local -a files=( "$@" )

	for f in "${files[@]}"
	do
		[ -f "$f" -o -d "$f" ] || die "$f: No such file or directory."
	done
}

function build_new_tree()
{
	local untracked=$1 ; shift
	local ignored=$1 ; shift
	local -a files=( "$@" )

	(
	set -e
	local WIP_INDEX=$(get_index_file)
	mkdir -p "$(dirname $WIP_INDEX)"
	if [ "$NOT_EMACS_MAGIT_WIP" ]
	then
		rm -f "$WIP_INDEX"
	fi
	cp -p "$GIT_DIR/index" "$WIP_INDEX"
	export GIT_INDEX_FILE="$WIP_INDEX"
	$GIT_COMMAND read-tree $wip_parent
	if test "${#files[@]}" -gt 0
	then
		$GIT_COMMAND add -f "${files[@]}"
	else
		$GIT_COMMAND add --update .
	fi
	[ -n "$untracked" ] && $GIT_COMMAND add .
	[ -n "$ignored" ] && $GIT_COMMAND add -f -A .
	$GIT_COMMAND write-tree
	rm -f "$WIP_INDEX"
	)
}

function do_save()
{
	local msg="$1" ; shift
	local add_untracked=
	local add_ignored=
	local no_sign=
	local push=0

	while test $# != 0
	do
		case "$1" in
		-e|--editor)
			EDITOR_MODE=true
			GIT_COMMAND="git -c color.ui=false"
			;;
		-u|--untracked)
			add_untracked=t
			;;
		-i|--ignored)
			add_ignored=t
			;;
		--no-gpg-sign)
			no_sign=--no-gpg-sign
			;;
		-p|--push)
			push=$2
			shift
			;;
		--)
			shift
			break
			;;
		*)
			[ -f "$1" ] && break
			die "Unknown option '$1'."
			;;
		esac
		shift
	done
	local -a files=( "$@" )
	local "add_untracked=$add_untracked"
	local "add_ignored=$add_ignored"
	local "push=$push"

	if test "${#files[@]}" -gt 0
	then
		dbg "check_files ${files[@]}"
		check_files "${files[@]}"
	fi

	dbg "msg=$msg"
	dbg "files=$files"

	local work_branch=$(get_work_branch)
	local wip_branch="$WIP_PREFIX$work_branch"
	dbg "work_branch=$work_branch"
	dbg "wip_branch=$wip_branch"

	# enable reflog
	local wip_branch_reflog="$GIT_DIR/logs/$wip_branch"
	dbg "wip_branch_reflog=$wip_branch_reflog"
	mkdir -p "$(dirname "$wip_branch_reflog")"
	: >>"$wip_branch_reflog"

	if ! work_last=$($GIT_COMMAND rev-parse --verify $work_branch)
	then
		report_soft_error "'$work_branch' branch has no commits."
	fi

	dbg "work_last=$work_last"

	if wip_last=$($GIT_COMMAND rev-parse --quiet --verify $wip_branch)
	then
		local base=$($GIT_COMMAND merge-base $wip_last $work_last) \
		|| die "'work_branch' and '$wip_branch' are unrelated."

		if [ $base = $work_last ]
		then
			wip_parent=$wip_last
		else
			wip_parent=$work_last
		fi
	else
		# remove empty/corrupt wip branch file
		local wip_branch_file="$GIT_DIR/$wip_branch"
		if test -e "$wip_branch_file"
		then
			dbg "removing $wip_branch_file"
			rm -f "$wip_branch_file"
		fi
		# use the working branch for parent
		wip_parent=$work_last
	fi

	dbg "wip_parent=$wip_parent"

	new_tree=$( build_new_tree "$add_untracked" "$add_ignored" "${files[@]}" ) \
	|| die "Cannot save the current worktree state."

	dbg "new_tree=$new_tree"

	if $GIT_COMMAND diff-tree --exit-code --quiet $new_tree $wip_parent
	then
		report_soft_error "no changes"
	fi

	dbg "... has changes"

	new_wip=$(printf '%s\n' "$msg" | $GIT_COMMAND commit-tree $no_sign $new_tree -p $wip_parent 2>/dev/null) \
	|| die "Cannot record working tree state"

	dbg "new_wip=$new_wip"

	msg1=$(printf '%s\n' "$msg" | sed -e 1q)
	$GIT_COMMAND update-ref -m "git-wip: $msg1" $wip_branch $new_wip $wip_last

	dbg "SUCCESS"

	local work_branch_remote=$($GIT_COMMAND config branch.${work_branch}.remote)
	local wip_remote_branch=$(echo "$WIP_PREFIX$work_branch" | cut -d/ -f2-)
	# echo wip_remote_branch=$wip_remote_branch
	# echo new_wip=$new_wip
	# echo work_branch_remote=${work_branch_remote}
	# echo work_branch_remote=${work_branch_remote:-origin}
	if $GIT_COMMAND ls-remote --exit-code --heads  ${work_branch_remote:-origin} ${wip_remote_branch} >/dev/null 2>&1
	then
		local rbase=$($GIT_COMMAND rev-parse refs/remotes/${work_branch_remote:-origin}/${wip_remote_branch}) ||
			die "remote branch for $wip_branch' not present."
		# echo rbase=$rbase
		local wip_commits=$($GIT_COMMAND rev-list --count ${rbase}..${new_wip})
	else
		local base=$($GIT_COMMAND merge-base $new_wip $work_last) ||
			die "'work_branch' and '$wip_branch' are unrelated."
		# echo base=$base
		local wip_commits=$($GIT_COMMAND rev-list --count ${base}..${new_wip})
	fi

	if [ -z "$push" ]
	then
		if [ -n "$GIT_WIP_PUSH_COUNT" ]
		then
			push=$GIT_WIP_PUSH_COUNT
		fi
	fi

	if [ $push -gt 0 -a $wip_commits -ge $push ]
	then
		do_push "$work_branch"
	else
		# echo push=$push
		# echo wip_commits=$wip_commits
		if [ $push -gt 0 ]
		then
			echo Not pushing
		fi
	fi

}

function do_info()
{
	local branch=$1

	die "info not implemented"
}

function do_log()
{
	local work_branch=$1
	[ -z $branch ] && work_branch=$(get_work_branch)
	local wip_branch="$WIP_PREFIX$work_branch"

	local log_cmd="log"
	local graph=""
	local pretty=""
	local stat=""
	while [ -n "$1" ]
	do
		case "$1" in
			-P|--pretty)
				graph="--graph"
				pretty="--pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
				;;
			-s|--stat)
				stat="--stat"
				;;
			-r|--reflog)
				log_cmd="reflog"
				;;
			*)
				break
				;;
		esac
		shift
	done

	if [ $log_cmd = reflog ]
	then
		echo $GIT_COMMAND reflog $stat $pretty $wip_branch | sh
		return $?
	fi

	if ! work_last=$($GIT_COMMAND rev-parse --verify $work_branch)
	then
		die "'$work_branch' branch has no commits."
	fi

	dbg work_last=$work_last

	if ! wip_last=$($GIT_COMMAND rev-parse --quiet --verify $wip_branch)
	then
		die "'$work_branch' branch has no commits."
	fi

	dbg wip_last=$wip_last

	local base=$($GIT_COMMAND merge-base $wip_last $work_last)

	dbg base=$base

	local stop=$base
	if $GIT_COMMAND cat-file commit $base | grep -q '^parent'
	then
		stop="$base~1"
	fi

	dbg stop=$stop

	echo $GIT_COMMAND log $graph $stat $pretty "$@" $wip_last $work_last "^$stop" | sh
}

function do_delete()
{
	local branch=$1

	die "delete not implemented"
}

function do_push()
{
	local work_branch=$1
	# echo work_branch=$work_branch
	shift
	[ -z $branch ] && work_branch=$(get_work_branch)
	local wip_branch="$WIP_PREFIX$work_branch"
	local wip_remote_branch=$(echo "$WIP_PREFIX$work_branch" | cut -d/ -f2-)
	# echo work_branch=$work_branch
	# local force=""
	# while [ -n "$1" ]
	# do
	# 	case "$1" in
	# 		-f|--force)
	# 			force="t"
	# 			;;
	# 		*)
	# 			break
	# 			;;
	# 	esac
	# 	shift
	# done

	if ! work_last=$($GIT_COMMAND rev-parse --verify $work_branch)
	then
		report_soft_error "'$work_branch' branch has no commits."
	fi
	# if wip_last=$($GIT_COMMAND rev-parse --quiet --verify $wip_branch)
	# then
	# 	local base=$($GIT_COMMAND merge-base $wip_last $work_last) \
	# 		|| die "'work_branch' and '$wip_branch' are unrelated."

	# 	if [ $base = $work_last ]
  #   then
	# 		wip_parent=$wip_last
	# 	else
	# 		wip_parent=$work_last
	# 	fi
	# else
	# 	# remove empty/corrupt wip branch file
	# 	local wip_branch_file="$GIT_DIR/$wip_branch"
	# 	if test -e "$wip_branch_file"
	# 	then
	# 		dbg "removing $wip_branch_file"
	# 		rm -f "$wip_branch_file"
	# 	fi
	# 	# use the working branch for parent
	# 	wip_parent=$work_last
	# fi

	# dbg "wip_parent=$wip_parent"

	if ! work_last=$($GIT_COMMAND rev-parse --verify $work_branch)
	then
		die "'$work_branch' branch has no commits."
	fi

	dbg work_last=$work_last

	if ! wip_last=$($GIT_COMMAND rev-parse --quiet --verify $wip_branch)
	then
		die "'$work_branch' branch has no commits."
	fi

	dbg wip_last=$wip_last

	local base=$($GIT_COMMAND merge-base $wip_last $work_last)

	dbg base=$base

	local stop=$base

	local work_branch_remote=$($GIT_COMMAND config branch.${work_branch}.remote)
	if $GIT_COMMAND ls-remote --exit-code --heads  ${work_branch_remote:-origin} ${wip_remote_branch} >/dev/null 2>&1
	then
		$GIT_COMMAND push $* ${work_branch_remote:-origin} ${wip_branch}:refs/heads/${wip_remote_branch}
	else
		$GIT_COMMAND push -u $* ${work_branch_remote:-origin} ${wip_branch}:refs/heads/${wip_remote_branch}
	fi
}

function do_help()
{
	local rc=$1

	cat <<END
Usage: $GIT_COMMAND wip $USAGE

$LONG_USAGE
END
	exit $rc
}

main "$@"
exit

# vim: set noet sw=8
